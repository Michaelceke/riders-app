{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = appNotificationSaga;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _nativeBase = require(\"native-base\");\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _types = require(\"./types\");\n\nvar _marked = _regenerator.default.mark(showErrorToast),\n    _marked2 = _regenerator.default.mark(showMessageToast),\n    _marked3 = _regenerator.default.mark(watchSetError),\n    _marked4 = _regenerator.default.mark(watchSetMessage),\n    _marked5 = _regenerator.default.mark(appNotificationSaga);\n\nfunction showErrorToast(action) {\n  return _regenerator.default.wrap(function showErrorToast$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _nativeBase.Toast.show({\n            text: action.payload.error,\n            type: 'danger',\n            duration: 5000\n          });\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction showMessageToast(action) {\n  return _regenerator.default.wrap(function showMessageToast$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _nativeBase.Toast.show({\n            text: action.payload.message,\n            type: 'success',\n            duration: 5000\n          });\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction watchSetError() {\n  return _regenerator.default.wrap(function watchSetError$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return (0, _effects.takeLatest)(_types.AppNotificationActionTypes.REPORT_ERROR, showErrorToast);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchSetMessage() {\n  return _regenerator.default.wrap(function watchSetMessage$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return (0, _effects.takeEvery)(_types.AppNotificationActionTypes.REPORT_MESSAGE, showMessageToast);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction appNotificationSaga() {\n  return _regenerator.default.wrap(function appNotificationSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return (0, _effects.all)([(0, _effects.fork)(watchSetError), (0, _effects.fork)(watchSetMessage)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/a/projects/riders-app/src/stores/appNotification/saga.ts"],"names":["showErrorToast","showMessageToast","watchSetError","watchSetMessage","appNotificationSaga","action","Toast","show","text","payload","error","type","duration","message","AppNotificationActionTypes","REPORT_ERROR","REPORT_MESSAGE"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;wCAMUA,c;yCAQAC,gB;yCAQAC,a;yCAIAC,e;yCAIeC,mB;;AAxBzB,SAAUJ,cAAV,CAAyBK,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMC,kBAAMC,IAAN,CAAW;AACfC,YAAAA,IAAI,EAAEH,MAAM,CAACI,OAAP,CAAeC,KADN;AAEfC,YAAAA,IAAI,EAAE,QAFS;AAGfC,YAAAA,QAAQ,EAAE;AAHK,WAAX,CAAN;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,SAAUX,gBAAV,CAA2BI,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMC,kBAAMC,IAAN,CAAW;AACfC,YAAAA,IAAI,EAAEH,MAAM,CAACI,OAAP,CAAeI,OADN;AAEfF,YAAAA,IAAI,EAAE,SAFS;AAGfC,YAAAA,QAAQ,EAAE;AAHK,WAAX,CAAN;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,SAAUV,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAM,yBAAWY,kCAA2BC,YAAtC,EAAoDf,cAApD,CAAN;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAM,wBAAUW,kCAA2BE,cAArC,EAAqDf,gBAArD,CAAN;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIe,SAAUG,mBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAM,kBAAI,CAAC,mBAAKF,aAAL,CAAD,EAAsB,mBAAKC,eAAL,CAAtB,CAAJ,CAAN;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { Toast } from 'native-base';\r\nimport { all, fork, takeEvery, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n  AppNotificationActionTypes,\r\n  ReportErrorAction,\r\n  ReportMessageAction,\r\n} from './types';\r\n\r\nfunction* showErrorToast(action: ReportErrorAction) {\r\n  yield Toast.show({\r\n    text: action.payload.error,\r\n    type: 'danger',\r\n    duration: 5000,\r\n  });\r\n}\r\n\r\nfunction* showMessageToast(action: ReportMessageAction) {\r\n  yield Toast.show({\r\n    text: action.payload.message,\r\n    type: 'success',\r\n    duration: 5000,\r\n  });\r\n}\r\n\r\nfunction* watchSetError() {\r\n  yield takeLatest(AppNotificationActionTypes.REPORT_ERROR, showErrorToast);\r\n}\r\n\r\nfunction* watchSetMessage() {\r\n  yield takeEvery(AppNotificationActionTypes.REPORT_MESSAGE, showMessageToast);\r\n}\r\n\r\nexport default function* appNotificationSaga() {\r\n  yield all([fork(watchSetError), fork(watchSetMessage)]);\r\n}\r\n"]},"metadata":{},"sourceType":"script"}