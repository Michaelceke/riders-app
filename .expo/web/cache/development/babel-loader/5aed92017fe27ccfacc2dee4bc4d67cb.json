{
  "ast": null,
  "code": "var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = MapScreen;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNativeMaps = _interopRequireWildcard(require(\"react-native-maps\"));\n\nvar _nativeBase = require(\"native-base\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _Bicycle = require(\"../../../../assets/IconComponents/Bicycle\");\n\nvar _MapFooter = _interopRequireDefault(require(\"./MapFooter\"));\n\nvar _MapHeader = _interopRequireDefault(require(\"./MapHeader\"));\n\nvar _jsxFileName = \"C:\\\\Users\\\\a\\\\projects\\\\riders-app\\\\src\\\\screens\\\\BatchOrders\\\\MapScreens\\\\index.tsx\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction MapScreen() {\n  var _React$useState = React.useState({\n    latitude: 6.498939,\n    longitude: 3.347795,\n    latitudeDelta: 0.0922,\n    longitudeDelta: 0.0421\n  }),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      mapRegion = _React$useState2[0],\n      setmapRegion = _React$useState2[1];\n\n  var _React$useState3 = React.useState(true),\n      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),\n      showModal = _React$useState4[0],\n      setShowModal = _React$useState4[1];\n\n  var onClose = function onClose() {\n    setShowModal(false);\n  };\n\n  return React.createElement(_nativeBase.Box, {\n    flex: 1,\n    bgColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, React.createElement(_reactNativeMaps.default, {\n    style: {\n      alignSelf: \"stretch\",\n      height: \"100%\"\n    },\n    region: mapRegion,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, React.createElement(_reactNativeMaps.Marker, {\n    coordinate: mapRegion,\n    title: \"Marker\",\n    description: \"test description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, React.createElement(_Bicycle.Bicycle, {\n    fill: \"#FF0000\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }))), React.createElement(_nativeBase.Modal, {\n    isOpen: showModal,\n    onClose: onClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, React.createElement(_MapHeader.default, {\n    onClose: onClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  })), React.createElement(_MapFooter.default, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  map: {\n    width: _reactNative.Dimensions.get(\"window\").width,\n    height: _reactNative.Dimensions.get(\"window\").height\n  }\n});",
  "map": {
    "version": 3,
    "sources": [
      "C:/Users/a/projects/riders-app/src/screens/BatchOrders/MapScreens/index.tsx"
    ],
    "names": [
      "MapScreen",
      "React",
      "useState",
      "latitude",
      "longitude",
      "latitudeDelta",
      "longitudeDelta",
      "mapRegion",
      "setmapRegion",
      "showModal",
      "setShowModal",
      "onClose",
      "alignSelf",
      "height",
      "styles",
      "StyleSheet",
      "create",
      "map",
      "width",
      "Dimensions",
      "get"
    ],
    "mappings": ";;;;;;;;;AAAA;;AACA;;AACA;;AAWA;;AACA;;AACA;;AACA;;;;;;;;AAWe,SAASA,SAAT,GAAqB;AAClC,wBAAkCC,KAAK,CAACC,QAAN,CAAiC;AACjEC,IAAAA,QAAQ,EAAE,QADuD;AAEjEC,IAAAA,SAAS,EAAE,QAFsD;AAGjEC,IAAAA,aAAa,EAAE,MAHkD;AAIjEC,IAAAA,cAAc,EAAE;AAJiD,GAAjC,CAAlC;AAAA;AAAA,MAAOC,SAAP;AAAA,MAAkBC,YAAlB;;AAMA,yBAAkCP,KAAK,CAACC,QAAN,CAAe,IAAf,CAAlC;AAAA;AAAA,MAAOO,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,MAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBD,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAFD;;AAGA,SACE,oBAAC,eAAD;AAAK,IAAA,IAAI,EAAE,CAAX;AAAc,IAAA,OAAO,EAAC,MAAtB;AAA6B,IAAA,UAAU,EAAC,QAAxC;AAAiD,IAAA,cAAc,EAAC,QAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,wBAAD;AACE,IAAA,KAAK,EAAE;AAAEE,MAAAA,SAAS,EAAE,SAAb;AAAwBC,MAAAA,MAAM,EAAE;AAAhC,KADT;AAEE,IAAA,MAAM,EAAEN,SAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAkBE,oBAAC,uBAAD;AACE,IAAA,UAAU,EAAEA,SADd;AAEE,IAAA,KAAK,EAAC,QAFR;AAGE,IAAA,WAAW,EAAC,kBAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,oBAAC,gBAAD;AAAS,IAAA,IAAI,EAAE,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CAlBF,CADF,EA4BE,oBAAC,iBAAD;AAAO,IAAA,MAAM,EAAEE,SAAf;AAA0B,IAAA,OAAO,EAAEE,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,kBAAD;AAAW,IAAA,OAAO,EAAEA,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA5BF,EAgCE,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhCF,CADF;AAoCD;;AAED,IAAMG,MAAM,GAAGC,wBAAWC,MAAX,CAAkB;AAC/BC,EAAAA,GAAG,EAAE;AACHC,IAAAA,KAAK,EAAEC,wBAAWC,GAAX,CAAe,QAAf,EAAyBF,KAD7B;AAEHL,IAAAA,MAAM,EAAEM,wBAAWC,GAAX,CAAe,QAAf,EAAyBP;AAF9B;AAD0B,CAAlB,CAAf",
    "sourcesContent": [
      "import * as React from \"react\";\nimport MapView, { Marker } from \"react-native-maps\";\nimport {\n  Box,\n  Center,\n  Text,\n  Icon,\n  HStack,\n  Button,\n  IconButton,\n  Spacer,\n  Modal,\n} from \"native-base\";\nimport { StyleSheet, Dimensions } from \"react-native\";\nimport { Bicycle } from \"../../../../assets/IconComponents/Bicycle\";\nimport MapFooter from \"./MapFooter\";\nimport MapHeader from \"./MapHeader\";\n\nimport { SimpleLineIcons } from \"@expo/vector-icons\";\n\ninterface GeolocationProps {\n  latitude: number;\n  longitude: number;\n  latitudeDelta: number;\n  longitudeDelta: number;\n}\n\nexport default function MapScreen() {\n  const [mapRegion, setmapRegion] = React.useState<GeolocationProps>({\n    latitude: 6.498939,\n    longitude: 3.347795,\n    latitudeDelta: 0.0922,\n    longitudeDelta: 0.0421,\n  });\n  const [showModal, setShowModal] = React.useState(true);\n\n  const onClose = () => {\n    setShowModal(false);\n  };\n  return (\n    <Box flex={1} bgColor=\"#fff\" alignItems=\"center\" justifyContent=\"center\">\n      <MapView\n        style={{ alignSelf: \"stretch\", height: \"100%\" }}\n        region={mapRegion}\n        // onRegionChange={(region) => {\n        //   setmapRegion({\n        //     ...mapRegion,\n        //     latitude: region.latitude,\n        //     longitude: region.longitude,\n        //   });\n        // }}\n        // onRegionChangeComplete={(region) => {\n        //   setmapRegion({\n        //     ...mapRegion,\n        //     latitude: region.latitude,\n        //     longitude: region.longitude,\n        //   });\n        // }}\n      >\n        <Marker\n          coordinate={mapRegion}\n          title=\"Marker\"\n          description=\"test description\"\n        >\n          <Bicycle fill={\"#FF0000\"} />\n        </Marker>\n      </MapView>\n\n      <Modal isOpen={showModal} onClose={onClose}>\n        <MapHeader onClose={onClose} />\n      </Modal>\n\n      <MapFooter />\n    </Box>\n  );\n}\n\nconst styles = StyleSheet.create({\n  map: {\n    width: Dimensions.get(\"window\").width,\n    height: Dimensions.get(\"window\").height,\n  },\n});\n"
    ]
  },
  "metadata": {},
  "sourceType": "script"
}
