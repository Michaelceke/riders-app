{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = quoteSaga;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _quote = require(\"../../services/quote\");\n\nvar _actions = require(\"../appNotification/actions\");\n\nvar _actions2 = require(\"./actions\");\n\nvar _types = require(\"./types\");\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _marked = _regenerator.default.mark(fetchQuote),\n    _marked2 = _regenerator.default.mark(watchFetchQuote),\n    _marked3 = _regenerator.default.mark(quoteSaga);\n\nfunction fetchQuote() {\n  var res, value;\n  return _regenerator.default.wrap(function fetchQuote$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return (0, _effects.put)((0, _actions.setAppLoading)(true));\n\n        case 2:\n          _context.next = 4;\n          return (0, _effects.call)(_quote.fetchQuoteRequest);\n\n        case 4:\n          res = _context.sent;\n\n          if (!res.ok) {\n            _context.next = 14;\n            break;\n          }\n\n          if (!res.data) {\n            _context.next = 10;\n            break;\n          }\n\n          value = res.data.contents.quotes[0];\n          _context.next = 10;\n          return (0, _effects.put)((0, _actions2.fetchQuoteSuccess)(value));\n\n        case 10:\n          _context.next = 12;\n          return (0, _effects.put)((0, _actions.alertMessage)(\"Your quote is here. Be inspired!\"));\n\n        case 12:\n          _context.next = 16;\n          break;\n\n        case 14:\n          _context.next = 16;\n          return (0, _effects.put)((0, _actions.alertError)(\"Couldn't fetch your quote. Kanye is still good\"));\n\n        case 16:\n          _context.next = 18;\n          return (0, _effects.put)((0, _actions.setAppLoading)(false));\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction watchFetchQuote() {\n  return _regenerator.default.wrap(function watchFetchQuote$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return (0, _effects.takeLatest)(_types.QuoteActionTypes.FETCH_QUOTES, fetchQuote);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction quoteSaga() {\n  return _regenerator.default.wrap(function quoteSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return (0, _effects.all)([(0, _effects.fork)(watchFetchQuote)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/a/projects/riders-app/src/stores/quote/saga.ts"],"names":["fetchQuote","watchFetchQuote","quoteSaga","fetchQuoteRequest","res","ok","data","value","contents","quotes","QuoteActionTypes","FETCH_QUOTES"],"mappings":";;;;;;;;;AAAA;;AACA;;AAKA;;AACA;;AAEA;;wCAEUA,U;yCAeAC,e;yCAIeC,S;;AAnBzB,SAAUF,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAM,kBAAI,4BAAc,IAAd,CAAJ,CAAN;;AADF;AAAA;AAE0C,iBAAM,mBAAKG,wBAAL,CAAN;;AAF1C;AAEQC,UAAAA,GAFR;;AAAA,eAGMA,GAAG,CAACC,EAHV;AAAA;AAAA;AAAA;;AAAA,eAIQD,GAAG,CAACE,IAJZ;AAAA;AAAA;AAAA;;AAKYC,UAAAA,KALZ,GAKoBH,GAAG,CAACE,IAAJ,CAASE,QAAT,CAAkBC,MAAlB,CAAyB,CAAzB,CALpB;AAAA;AAMM,iBAAM,kBAAI,iCAAkBF,KAAlB,CAAJ,CAAN;;AANN;AAAA;AAQI,iBAAM,kBAAI,2BAAa,kCAAb,CAAJ,CAAN;;AARJ;AAAA;AAAA;;AAAA;AAAA;AAUI,iBAAM,kBAAI,yBAAW,gDAAX,CAAJ,CAAN;;AAVJ;AAAA;AAYE,iBAAM,kBAAI,4BAAc,KAAd,CAAJ,CAAN;;AAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUN,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAM,yBAAWS,wBAAiBC,YAA5B,EAA0CX,UAA1C,CAAN;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIe,SAAUE,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAM,kBAAI,CAAC,mBAAKD,eAAL,CAAD,CAAJ,CAAN;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { fetchQuoteRequest, QuoteResponse } from \"@src/services/quote\";\nimport {\n  alertError,\n  alertMessage,\n  setAppLoading,\n} from \"@src/stores/appNotification/actions\";\nimport { fetchQuoteSuccess } from \"@src/stores/quote/actions\";\nimport { QuoteActionTypes } from \"@src/stores/quote/types\";\nimport { ApiResponse } from \"apisauce\";\nimport { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\n\nfunction* fetchQuote() {\n  yield put(setAppLoading(true));\n  const res: ApiResponse<QuoteResponse> = yield call(fetchQuoteRequest);\n  if (res.ok) {\n    if (res.data) {\n      const value = res.data.contents.quotes[0];\n      yield put(fetchQuoteSuccess(value));\n    }\n    yield put(alertMessage(\"Your quote is here. Be inspired!\"));\n  } else {\n    yield put(alertError(\"Couldn't fetch your quote. Kanye is still good\"));\n  }\n  yield put(setAppLoading(false));\n}\n\nfunction* watchFetchQuote() {\n  yield takeLatest(QuoteActionTypes.FETCH_QUOTES, fetchQuote);\n}\n\nexport default function* quoteSaga() {\n  yield all([fork(watchFetchQuote)]);\n}\n"]},"metadata":{},"sourceType":"script"}