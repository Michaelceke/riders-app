{
  "ast": null,
  "code": "var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _types = require(\"./types\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar initialState = {\n  loading: false\n};\n\nvar appNotificationReducer = function appNotificationReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case _types.AppNotificationActionTypes.SET_LOADING:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: action.payload.loading\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nvar _default = appNotificationReducer;\nexports.default = _default;",
  "map": {
    "version": 3,
    "sources": [
      "C:/Users/a/projects/riders-app/src/stores/appNotification/reducer.ts"
    ],
    "names": [
      "initialState",
      "loading",
      "appNotificationReducer",
      "state",
      "action",
      "type",
      "AppNotificationActionTypes",
      "SET_LOADING",
      "payload"
    ],
    "mappings": ";;;;;;;;;AACA;;;;;;AAMA,IAAMA,YAAkC,GAAG;AACzCC,EAAAA,OAAO,EAAE;AADgC,CAA3C;;AAIA,IAAMC,sBAGL,GAAG,SAHEA,sBAGF,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;;AACpC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKC,kCAA2BC,WAAhC;AAA6C;AAC3C,+CAAYJ,KAAZ;AAAmBF,UAAAA,OAAO,EAAEG,MAAM,CAACI,OAAP,CAAeP;AAA3C;AACD;;AACD;AACE,aAAOE,KAAP;AALJ;AAOD,CAXD;;eAaeD,sB",
    "sourcesContent": [
      "import { Reducer } from \"redux\";\nimport {\n  AppNotificationState,\n  AppNotificationAction,\n  AppNotificationActionTypes,\n} from \"./types\";\n\nconst initialState: AppNotificationState = {\n  loading: false,\n};\n\nconst appNotificationReducer: Reducer<\n  AppNotificationState,\n  AppNotificationAction\n> = (state = initialState, action) => {\n  switch (action.type) {\n    case AppNotificationActionTypes.SET_LOADING: {\n      return { ...state, loading: action.payload.loading };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default appNotificationReducer;\n"
    ]
  },
  "metadata": {},
  "sourceType": "script"
}
