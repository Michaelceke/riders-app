{
  "ast": null,
  "code": "Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updatePropsJestWrapper = exports.updateProps = exports.default = void 0;\n\nvar _Colors = require(\"./Colors\");\n\nvar _core = require(\"./core\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _jsReanimated = require(\"./js-reanimated\");\n\nvar colorProps = ['backgroundColor', 'borderBottomColor', 'borderColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor', 'borderStartColor', 'borderEndColor', 'color', 'shadowColor', 'textDecorationColor', 'tintColor', 'textShadowColor', 'overlayColor'];\nvar ColorProperties = !(0, _core.isConfigured)() ? [] : (0, _core.makeShareable)(colorProps);\n\nvar updateProps = function () {\n  var _f = function _f(viewDescriptor, updates, maybeViewRef, adapters) {\n    var viewName = viewDescriptor.value.name || 'RCTView';\n\n    if (adapters) {\n      adapters.forEach(function (adapter) {\n        adapter(updates);\n      });\n    }\n\n    if (_reactNative.Platform.OS !== 'web') {\n      Object.keys(updates).forEach(function (key) {\n        if (ColorProperties.indexOf(key) !== -1) {\n          updates[key] = (0, _Colors.processColor)(updates[key]);\n        }\n      });\n    }\n\n    var updatePropsInternal = typeof _updateProps === 'undefined' ? _jsReanimated._updatePropsJS : _updateProps;\n    updatePropsInternal(viewDescriptor.value.tag, viewName, updates, maybeViewRef);\n  };\n\n  _f._closure = {\n    Platform: {\n      OS: _reactNative.Platform.OS\n    },\n    ColorProperties: ColorProperties,\n    processColor: _Colors.processColor,\n    _updatePropsJS: _jsReanimated._updatePropsJS\n  };\n  _f.asString = \"function _f(viewDescriptor,updates,maybeViewRef,adapters){const{Platform,ColorProperties,processColor,_updatePropsJS}=jsThis._closure;{var viewName=viewDescriptor.value.name||'RCTView';if(adapters){adapters.forEach(function(adapter){adapter(updates);});}if(Platform.OS!=='web'){Object.keys(updates).forEach(function(key){if(ColorProperties.indexOf(key)!==-1){updates[key]=processColor(updates[key]);}});}var updatePropsInternal=typeof _updateProps==='undefined'?_updatePropsJS:_updateProps;updatePropsInternal(viewDescriptor.value.tag,viewName,updates,maybeViewRef);}}\";\n  _f.__workletHash = 8129673021160;\n  _f.__location = \"C:\\\\Users\\\\a\\\\projects\\\\riders-app\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\UpdateProps.js (26:27)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nexports.updateProps = updateProps;\n\nvar updatePropsJestWrapper = function updatePropsJestWrapper(viewDescriptor, updates, maybeViewRef, adapters, animatedStyle) {\n  animatedStyle.current.value = Object.assign(Object.assign({}, animatedStyle.current.value), updates);\n  updateProps(viewDescriptor, updates, maybeViewRef, adapters);\n};\n\nexports.updatePropsJestWrapper = updatePropsJestWrapper;\nvar _default = updateProps;\nexports.default = _default;",
  "map": {
    "version": 3,
    "sources": [
      "C:/Users/a/projects/riders-app/node_modules/react-native-reanimated/lib/reanimated2/UpdateProps.js"
    ],
    "names": [
      "colorProps",
      "ColorProperties",
      "updateProps",
      "viewDescriptor",
      "updates",
      "maybeViewRef",
      "adapters",
      "viewName",
      "value",
      "name",
      "forEach",
      "adapter",
      "Platform",
      "OS",
      "Object",
      "keys",
      "key",
      "indexOf",
      "updatePropsInternal",
      "_updateProps",
      "_updatePropsJS",
      "tag",
      "processColor",
      "updatePropsJestWrapper",
      "animatedStyle",
      "current",
      "assign"
    ],
    "mappings": ";;;;;AAGA;;AACA;;AACA;;AACA;;AAEA,IAAMA,UAAU,GAAG,CACf,iBADe,EAEf,mBAFe,EAGf,aAHe,EAIf,iBAJe,EAKf,kBALe,EAMf,gBANe,EAOf,kBAPe,EAQf,gBARe,EASf,OATe,EAUf,aAVe,EAWf,qBAXe,EAYf,WAZe,EAaf,iBAbe,EAcf,cAde,CAAnB;AAgBA,IAAMC,eAAe,GAAG,CAAC,yBAAD,GAAkB,EAAlB,GAAuB,yBAAcD,UAAd,CAA/C;;AACO,IAAME,WAAW;AAAA,uBAAIC,cAAJ,EAAoBC,OAApB,EAA6BC,YAA7B,EAA2CC,QAA3C,EAAwD;AAE5E,QAAMC,QAAQ,GAAGJ,cAAc,CAACK,KAAf,CAAqBC,IAArB,IAA6B,SAA9C;;AACA,QAAIH,QAAJ,EAAc;AACVA,MAAAA,QAAQ,CAACI,OAAT,CAAiB,UAACC,OAAD,EAAa;AAC1BA,QAAAA,OAAO,CAACP,OAAD,CAAP;AACH,OAFD;AAGH;;AACD,QAAIQ,sBAASC,EAAT,KAAgB,KAApB,EAA2B;AACvBC,MAAAA,MAAM,CAACC,IAAP,CAAYX,OAAZ,EAAqBM,OAArB,CAA6B,UAACM,GAAD,EAAS;AAClC,YAAIf,eAAe,CAACgB,OAAhB,CAAwBD,GAAxB,MAAiC,CAAC,CAAtC,EAAyC;AACrCZ,UAAAA,OAAO,CAACY,GAAD,CAAP,GAAe,0BAAaZ,OAAO,CAACY,GAAD,CAApB,CAAf;AACH;AACJ,OAJD;AAKH;;AACD,QAAME,mBAAmB,GAAG,OAAOC,YAAP,KAAwB,WAAxB,GAAsCC,4BAAtC,GAAuDD,YAAnF;AACAD,IAAAA,mBAAmB,CAACf,cAAc,CAACK,KAAf,CAAqBa,GAAtB,EAA2Bd,QAA3B,EAAqCH,OAArC,EAA8CC,YAA9C,CAAnB;AACH,GAjBuB;;AAAA;AAAA;AAAA,UAblBO,sBAASC;AAaS;AAAA,qBAXdZ,eAWc;AAAA,kBAVDqB,oBAUC;AAAA,oBAL0CF;AAK1C;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,GAAjB;;;;AAkBA,IAAMG,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACpB,cAAD,EAAiBC,OAAjB,EAA0BC,YAA1B,EAAwCC,QAAxC,EAAkDkB,aAAlD,EAAoE;AACtGA,EAAAA,aAAa,CAACC,OAAd,CAAsBjB,KAAtB,GAA8BM,MAAM,CAACY,MAAP,CAAcZ,MAAM,CAACY,MAAP,CAAc,EAAd,EAAkBF,aAAa,CAACC,OAAd,CAAsBjB,KAAxC,CAAd,EAA8DJ,OAA9D,CAA9B;AACAF,EAAAA,WAAW,CAACC,cAAD,EAAiBC,OAAjB,EAA0BC,YAA1B,EAAwCC,QAAxC,CAAX;AACH,CAHM;;;eAIQJ,W",
    "sourcesContent": [
      "/* global _updateProps */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport { processColor } from './Colors';\nimport { makeShareable, isConfigured } from './core';\nimport { Platform } from 'react-native';\nimport { _updatePropsJS } from './js-reanimated';\n// copied from react-native/Libraries/Components/View/ReactNativeStyleAttributes\nconst colorProps = [\n    'backgroundColor',\n    'borderBottomColor',\n    'borderColor',\n    'borderLeftColor',\n    'borderRightColor',\n    'borderTopColor',\n    'borderStartColor',\n    'borderEndColor',\n    'color',\n    'shadowColor',\n    'textDecorationColor',\n    'tintColor',\n    'textShadowColor',\n    'overlayColor',\n];\nconst ColorProperties = !isConfigured() ? [] : makeShareable(colorProps);\nexport const updateProps = (viewDescriptor, updates, maybeViewRef, adapters) => {\n    'worklet';\n    const viewName = viewDescriptor.value.name || 'RCTView';\n    if (adapters) {\n        adapters.forEach((adapter) => {\n            adapter(updates);\n        });\n    }\n    if (Platform.OS !== 'web') {\n        Object.keys(updates).forEach((key) => {\n            if (ColorProperties.indexOf(key) !== -1) {\n                updates[key] = processColor(updates[key]);\n            }\n        });\n    }\n    const updatePropsInternal = typeof _updateProps === 'undefined' ? _updatePropsJS : _updateProps;\n    updatePropsInternal(viewDescriptor.value.tag, viewName, updates, maybeViewRef);\n};\nexport const updatePropsJestWrapper = (viewDescriptor, updates, maybeViewRef, adapters, animatedStyle) => {\n    animatedStyle.current.value = Object.assign(Object.assign({}, animatedStyle.current.value), updates);\n    updateProps(viewDescriptor, updates, maybeViewRef, adapters);\n};\nexport default updateProps;\n"
    ]
  },
  "metadata": {},
  "sourceType": "script"
}
